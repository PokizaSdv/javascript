Declaring and assigning variables in JavaScript | var
What is Variable
Variables in computer programs serve the purpose of storing and manipulating information. They act as containers that hold data, allowing us to assign descriptive names to that data for better understanding. Variables play a crucial role in labeling and storing data within the computer's memory. Throughout the execution of a program, variables can be utilized and modified, making them dynamic placeholders that can be replaced with the actual values they contain during evaluation.

In JavaScript, every element is subject to evaluation, including variables. The value of a variable is always what it contains at any given moment. Therefore, it is possible to substitute the variable name with the value it holds wherever it appears. This behavior allows variables to serve as convenient placeholders, simplifying the process of working with and manipulating data in JavaScript programs.

In JavaScript, variables can be declared and assigned using three keywords: var, let, and const.

var is the oldest keyword used to declare variables in JavaScript.

Declaring Variables
In JavaScript, in order to use a variable, we must declare it. Variable declaration is the act of introducing the variable to the environment. When we declare a variable, we will often initialize it to a value.

To declare a variable, use the var keyword, followed by a space and then the name of the variable.

To declare a variable, use the var keyword, followed by a space and then the name of the variable.

> var myVar;

Variable Assignment and Initialization
To initialize a variable to a value, simply assign the variable to a value when you declare it using the assignment operator, =.

Did you know?: In programming, an equal sign is used to assign values to variables, not to indicate equality like it is in math.

Let's create our first variable and play with it in the REPL:

> var myVar
> undefined

> myVar // we can use myVar without error because we declared it.
> undefined // myVar evaluates to undefined because we did not initialize myVar to any value.

> myVar = 5 // let's assign the value 5 to the variable myVar
> 5

> myVar // now it will evaluate to 5
> 5

> myVar + 2 // myVar still evaluates to 5, so myVar + 2 is really 5 + 2
> 7

> myVar // the variable is still unchanged
> 5

> var myOtherVar = 10 // we can also declare and assign a variable all at once
> undefined

> myOtherVar // myOtherVar evaluates to 10
> 10

Notice that when we declare or initialize a variable, the REPL prints out something underneath it. This is what the expression evaluates too. Everything in JavaScript is evaluated to some value! undefined is a very common "default" value, but more on this later.

You may have noticed that in previous code myVar + 2 evaluated to 7, but the value of the variable myVar was unchanged. Let's say we actually wanted to add 2 to myVar and save it back into myVar. To do this, we need to assign the variable again.

Check out this example using a better, more descriptive variable name:

> var num = 2
> undefined

> num = num + 8
> 10

> num // num is actually 10 now!
> 10

Whenever we assign a value to a variable, the data we are assigning must be evaluated first. For example, to evaluate num = num + 8 we must first evaluate the right side, num + 8. Once we have evaluated num + 8 to 10, then we store it into the variable called num.

Shorthand Operators

1. += (Addition assignment):

The += operator adds the value of the right operand to the variable and assigns the result to the variable.

var a = 10;
a += 5; // a = a + 5
console.log(a); // Outputs: 15 2. \*= (Multiplication assignment):

The \*= operator multiplies the variable by the value of the right operand and assigns the result to the variable.

var b = 10;
b _= 2; // b = b _ 2
console.log(b); // Outputs: 20 3. -= (Subtraction assignment):

The -= operator subtracts the value of the right operand from the variable and assigns the result to the variable.

let c = 10;
c -= 5; // c = c - 5
console.log(c); // Outputs: 5 4. /= (Division assignment):

The /= operator divides the variable by the value of the right operand and assigns the result to the variable.

let d = 10;
d /= 2; // d = d / 2
console.log(d); // Outputs: 5
